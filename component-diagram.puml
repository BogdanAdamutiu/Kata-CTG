@startuml
title Structural Design of Trading Card Game
package "trading-card-game" {

  component "Card" {
      +class CardFactory {
        +Card createInstanceOfCard(id : Number, value : Number)
      }
      -class Card {
        constructor(id : Number, value : Number)
        -value : Number
        -id : Number
        +Number equals(card : Card)
        +Number getDamage()
        +Number getId()
      }
      CardFactory "1" ..> "0..*" Card : " creates"
  }

  component "Playable Hand" {
        +class PlayableHandFactory {
          +PlayableHand createInstanceOfPlayableHand()
        }
        -class PlayableHand {
          -cards : Array of Card
          +Number hasPlayableCards()
          +Card takeCard()
        }
        PlayableHandFactory "1" ..> "0..*" PlayableHand : " creates"
        PlayableHand "1" o-> "0..20" Card : " has"
  }

  component "Hand" {
      +class HandFactory {
        +Hand createInstanceOfHand()
      }
      -class Hand {
        -cards : Array of Card
        +Card addToHand(card : Card)
        +PlayableHand availableHand(mana : Number)
        +Bool removeCard(card : Card)
      }
      HandFactory "1" ..> "0..*" Hand : " creates"
      Hand "1" o-> "0..20" Card : " has"
  }

  component "Deck" {
      +class DeckFactory {
        +Deck createInstanceOfDeck()
      }
      -class Deck {
        -cards : Array of Card
        // create with 20 cards:
        // 0,0,1,1,2,2,2,3,3,3,3,4,
        // 4,4,5,5,6,6,7,8
        +Card drawCard()
      }
      DeckFactory "1" ..> "0..*" Deck : " creates"
      DeckFactory "1" ..> "1" CardFactory : " creates"
      Deck "1" o-> "0..20" Card : " has"
  }

  component "Health" {
    +class HealthFactory {
      +Health createInstanceOfHealth()
    }
    -class Health {
      -amount : Number
      +Number getHealth()
      +void looseHealth(amount : Number)
      +void gainHealth(amount : Number)
    }
    HealthFactory "1" ..> "0..*" Health : " creates"
  }

  component "Mana" {
    +class ManaFactory {
      +Mana createInstanceOfMana()
    }
    -class Mana {
      -amount : Number
      +Number getMana()
      +void useMana(amount : Number)
      +void refillMana()
    }
    ManaFactory "1" ..> "0..*" Mana : " creates"
  }

  component "Player" {
    +class PlayerFactory {
      +Player createInstanceOfPlayer(health, mana, deck, initialHand)
    }
    -class Player {
      constructor(deck : Deck, health : Game, mana : Mana)
      -deck : Deck
      -hand : Hand
      -health : Game
      -mana : Mana
      +Card drawCard()
      +Card takeCard()
      +Number getHealth()
      +Number hasPlayableCards()
      +void sufferDamage(amount : Number)
      +void gainDamage(amount : Number)
      +void playCards(opponent : Player)
    }
    PlayerFactory "1" ..> "0..*" Player : " creates"
    PlayerFactory "1" .> "0..*" HandFactory : " creates"
    Player "1" o-> "1" Health : " have"
    Player "1" o-> "1" Mana : " have"
    Player "1" o-> "1" Deck : " have"
    Player "1" o-> "1" Hand : " have"
    Player "1" o-> "1" PlayableHand : " have"
  }

  component "Game" {
    class GameFactory {
      +Game createInstanceOfGame()
    }
    class Game {
      -startingPlayer : Player
      -otherPlayer : Player
      -void endGame()
      -void takeTurn() // receive 1 mana, refill mana, draw card, playCards
      +void startGame() // both players get 3 cards, figures out starting player, other player gets card
    }
    GameFactory "1" *--> "1" DeckFactory : " creates Deck for a Player"
    GameFactory "1" *--> "1" HealthFactory : " creates Health for a Player"
    GameFactory "1" *--> "1" ManaFactory : " creates Mana for a Player"
    GameFactory "1" *--> "1" PlayerFactory : " creates Player(s) for a Game"
    GameFactory "1" *.> "0..*" Game : " creates a Game"
    Game "1" o-> "1" Player : " has active"
    Game "1" o-> "1" Player : " has inactive"
  }
}
@enduml